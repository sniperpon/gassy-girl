@page "/analyze"
@inject IJSRuntime JSRuntime

<PageTitle>Gassy Girl - Analyze</PageTitle>

<div class="content content-analyze">
    <h1><img src="images/graph-192.png" class="content-icon"> Analyze</h1>

    <div class="content-analyze-area">
        <h2>Run a Report</h2>

        <EditForm EditContext="@editContext" OnValidSubmit="@RunReport">
            <table class="table table-borderless" style="color: white">
                <tbody>
                    <tr>
                        <td>
                            Report:
                        </td>
                        <td>
                            <InputSelect @bind-Value="selectedReport">
                                @foreach (var report in reportList)
                                {
                                    <option value="@report">@report</option>
                                }
                            </InputSelect>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            Car:
                        </td>
                        <td>
                            <InputSelect @bind-Value="selectedCar">
                                <option value="Select a car">Select a car</option>

                                @foreach (var carSelection in carSelections)
                                {
                                    <option value="@carSelection">@carSelection</option>
                                }
                            </InputSelect>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            Start Date:
                        </td>
                        <td>
                            <InputDate id="startDate" @bind-Value="startTime" />
                        </td>
                    </tr>
                    <tr>
                        <td>
                            End Date:
                        </td>
                        <td>
                            <InputDate id="endDate" @bind-Value="endTime" />
                        </td>
                    </tr>
                </tbody>
            </table>

            @if (selectedReport == "Maintenance Record")
            {
                <p><button type="submit" class="btn btn-primary shadow-none" data-bs-toggle="modal" data-bs-target="#dialogBox">Run Report</button></p>
            }
            else
            {
                <p><button type="submit" class="btn btn-primary shadow-none">Run Report</button></p>
            }
        </EditForm>
    </div>

    <DialogBox Title="Maintenance Report">
        <Body>
            <h2>@selectedCar</h2>

            <table class="table table-borderless" style="color: white">
                <thead class="thead-light">
                    <tr>
                        <th>Date</th><th>Item</th><th>Odometer</th><th>Notes</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var maintenance in maintenances
                        .Where(e => e.CarModel == selectedCar && e.Date >= startTime && e.Date <= endTime)
                        .OrderBy(e => e.Item)
                        .ThenByDescending(e => e.Date))
                    {
                        <tr>
                            <td>@maintenance.Date.ToShortDateString()</td><td>@maintenance.Item</td><td>@maintenance.Odometer</td><td>@maintenance.Notes</td>
                        </tr>
                    }
                </tbody>
            </table>
        </Body>
        <Footer>
            <button type="button" class="btn btn-secondary shadow-none" data-bs-dismiss="modal">Close</button>
        </Footer>
    </DialogBox>

    @if(showReport)
    {
        <div class="content-analyze-area" style="background-color: white">
            <div class="row">
                <div class="col-sm-12 my-5">
                    <RadzenChart>
                        <RadzenLineSeries Smooth="false" Data="@graphItems" CategoryProperty="Category" ValueProperty="Value">
                            <RadzenMarkers MarkerType="MarkerType.Circle" />
                            <RadzenSeriesDataLabels Visible="false" />
                        </RadzenLineSeries>
                        <RadzenCategoryAxis Padding="0">
                            <RadzenAxisTitle Text="@categoryTitle" />
                        </RadzenCategoryAxis>
                        <RadzenValueAxis>
                            <RadzenGridLines Visible="true" />
                            <RadzenAxisTitle Text="@valueTitle" />
                            <RadzenSeriesDataLabels Visible="false" />
                        </RadzenValueAxis>
                        <RadzenLegend Visible="false" />
                    </RadzenChart>
                </div>
            </div>
        </div>
    }
</div>

@code {
    // This view-model like mini class is what gets displayed on the chart
    class GraphItem
    {
        public string? Category { get; set; }
        public double Value { get; set; }
    }
    private List<GraphItem> graphItems = new();

    // Here are form-related variables
    private EditContext? editContext;
    private List<string> reportList = new();
    private List<MileageRecord> records = new();
    private List<MaintenanceRecord> maintenances = new();
    private List<Car> cars = new();
    private List<string> carSelections = new();

    // Here are the user selections
    private string selectedReport = "Average Mileage";
    private string selectedCar = "Select a car";
    private DateTime startTime = DateTime.Now.AddDays(-30);
    private DateTime endTime = DateTime.Now;

    // These variables control report execution and display
    private string? categoryTitle;
    private string? valueTitle;
    private bool showReport = false;

    // This event handler trips when the component is initialized
    protected override void OnInitialized()
    {
        PopulateData();

        editContext = new(selectedReport);
        editContext.OnFieldChanged += HandleFieldChanged;
    }

    // This method populates the form data
    private async void PopulateData()
    {
        // Populate the list of reports
        reportList.Add("Average Mileage");
        reportList.Add("Gas Price Over Time");
        reportList.Add("Miles Driven Over Time");
        reportList.Add("Maintenance Record");

        // Populate the cars and maintenances
        cars = new(await JSRuntime.InvokeAsync<List<Car>>("getCars"));
        maintenances = new(await JSRuntime.InvokeAsync<List<MaintenanceRecord>>("getMaintenances"));

        // Loop through the cars and populate the car selections
        foreach (var car in cars)
            carSelections.Add(car.Model + " " + car.Trim);

        // Fetch the mileage data
        records = new(await JSRuntime.InvokeAsync<List<MileageRecord>>("getMileages"));
        records = records.OrderBy(e => e.Date).ToList();

        // Refresh the state
        StateHasChanged();
    }

    // This method runs when the report form is submitted
    private void RunReport()
    {
        // Query for the relevant data depending on report type
        switch (selectedReport)
        {
            case "Average Mileage":
                graphItems.Clear();
                var relevantMileageRecords = records.Where(r => r.Date >= startTime && r.Date <= endTime && r.CarModel == selectedCar).OrderBy(e => e.Date).ToList();

                // Loop over the records and construct them into our view model
                foreach (var relevantRecord in relevantMileageRecords)
                    graphItems.Add(new GraphItem() { Category = relevantRecord.Date.ToShortDateString(), Value = Math.Round(relevantRecord.TripOdometer / relevantRecord.Gallons, 2) });

                // Set the title and break out
                valueTitle = "Miles per Gallon";
                showReport = true;
                break;
            case "Gas Price Over Time":
                graphItems.Clear();
                var relevantPriceRecords = records.Where(r => r.Date >= startTime && r.Date <= endTime && r.CarModel == selectedCar).OrderBy(e => e.Date).ToList();

                // Loop over the records and construct them into our view model
                foreach (var relevantRecord in relevantPriceRecords)
                    graphItems.Add(new GraphItem() { Category = relevantRecord.Date.ToShortDateString(), Value = Math.Round(relevantRecord.PricePerGallon, 2) });

                // Set the title and break out
                valueTitle = "Price per Gallon";
                showReport = true;
                break;
            case "Miles Driven Over Time":
                graphItems.Clear();
                var relevantMileRecords = records.Where(r => r.Date >= startTime && r.Date <= endTime && r.CarModel == selectedCar).OrderBy(e => e.Date).ToList();

                // Loop over the records and construct them into our view model
                foreach (var relevantRecord in relevantMileRecords)
                    graphItems.Add(new GraphItem() { Category = relevantRecord.Date.ToShortDateString(), Value = Math.Round(relevantRecord.TripOdometer, 2) });

                // Set the title and break out
                valueTitle = "Trip Odometer";
                showReport = true;
                break;
        }

        // Refresh the view
        categoryTitle = "Date";
        StateHasChanged();
    }

    // This event handler handles form field changes
    private void HandleFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        if (editContext is not null)
        {
            showReport = false;
            StateHasChanged();
        }
    }
}
